#Imports
import pygame
import random
import time

score = 0
highscores = 0

#Screen Dimensions
WIDTH, HEIGHT = 600,400
CELL_SIZE = 20 #size of each grid

#COLORS!
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
PINK = (255, 192, 203)
BROWN = (165, 42, 42)
CYAN = (0, 255, 255)
GREY = (128, 128, 128)
PURPLE = (128, 40, 128)


#Draw text
def draw_text(text, font, color, x, y):
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))

#Draw button
def draw_button(text, font, color, x, y, width, height, outline_color=BLACK, outline_width=2):
    pygame.draw.rect(screen, outline_color, (x - outline_width, y - outline_width, width + outline_width * 2, height + outline_width * 2))
    pygame.draw.rect(screen, color, (x, y, width, height))
    draw_text(text, font, BLACK, x + 10, y + 10)

#Draw button
def draw_button2(text, font, color, x, y, width, height, outline_color=WHITE, outline_width=2):
    pygame.draw.rect(screen, outline_color, (x - outline_width, y - outline_width, width + outline_width * 2, height + outline_width * 2))
    pygame.draw.rect(screen, color, (x, y, width, height))
    draw_text(text, font, WHITE, x + 10, y + 10)

#Main Menu
def main_menu():
    print("Welcome to SNEK!")
    menu_running = True
    while menu_running:
        screen.fill(BLACK) #Clear screen
        draw_text("SNEK", pygame.font.Font(None, 74), GREEN, WIDTH // 2-100, HEIGHT // 4)
        draw_button("Slow SNEK", pygame.font.Font(None, 40), PINK, WIDTH // 2-100, HEIGHT // 2 - 50, 200, 50)
        draw_button("Normal SNEK", pygame.font.Font(None, 40), YELLOW, WIDTH // 2-100, HEIGHT // 2, 200, 50)
        draw_button("Fast SNEK", pygame.font.Font(None, 40), PURPLE, WIDTH // 2-100, HEIGHT // 2 + 50, 200, 50)
        draw_button2("Exit", pygame.font.Font(None, 50), RED, WIDTH // 2 + 215, HEIGHT // 2 + 130, 90, 50)
        pygame.display.update() #Update screen to show menu

        for event in pygame.event.get():
            if event.type == pygame.QUIT or event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                if WIDTH // 2 + 215 <= mouse_x <= WIDTH // 2 + 305 and HEIGHT // 2 + 130 <= mouse_y <= HEIGHT // 2 + 180:
                    print("Exit selected")
                    pygame.quit()
                    exit()
            if event.type == pygame.QUIT:
                print("Quit event detected")
                pygame.quit()
                exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                if WIDTH // 2 - 100 <= mouse_x <= WIDTH // 2 + 100:
                    if HEIGHT // 2 - 50 <= mouse_y <= HEIGHT // 2:
                        print("Slowest SNEK selected")
                        return 5
                    elif HEIGHT // 2 <= mouse_y <= HEIGHT // 2 + 50:
                        print("Slower SNEK selected")
                        return 10
                    elif HEIGHT // 2 + 50 <= mouse_y <= HEIGHT // 2 + 100:
                        print("Slow SNEK selected")
                        return 15

#Initialize pygame
print("Initializing SNEK...")
pygame.display.init()
print("Creating SNEK window...")
pygame.font.init()

#CREATE GAME WINDOW
screen = pygame.display.set_mode((WIDTH, HEIGHT))
print("Game window created successfully!")
pygame.display.set_caption("SNEK")
pygame.event.set_grab(True) #captures all keyboard inputs

#SNEKE settings
snake = [(100, 100), (90, 100), (80, 100)] #list of segments
direction = "RIGHT"

#Gobble Settings
food = (random.randint(0, WIDTH // CELL_SIZE - 1) * CELL_SIZE,
        random.randint(0, HEIGHT // CELL_SIZE - 1) * CELL_SIZE)

#Game Loop
print("Starting SNEK loop...")
running = True
clock = pygame.time.Clock()
counter = 0 #Debug counter

#Display main menu and get game speed
game_speed = main_menu()

while True: #Constant running
    running = True
    snake = [(100, 100), (90, 100), (80, 100)]
    direction = "RIGHT"
    score = 0
    while running:
        screen.fill(BLACK) #background


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                print("Quit event detected")
                pygame.quit()
                exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and direction != "DOWN":
                    direction = "UP"
                elif event.key == pygame.K_DOWN and direction != "UP":
                    direction = "DOWN"
                elif event.key == pygame.K_LEFT and direction != "RIGHT":
                    direction = "LEFT"
                elif event.key == pygame.K_RIGHT and direction != "LEFT":
                    direction = "RIGHT"
            
        #MOVE SNEKE
        head_x, head_y = snake[0]
        if direction == "UP":
            head_y -= CELL_SIZE
        elif direction == "DOWN":
            head_y += CELL_SIZE
        elif direction == "LEFT":
            head_x -= CELL_SIZE
        elif direction == "RIGHT":
            head_x += CELL_SIZE

        #Collision Detection (GAME OVER)
        if head_x < 0 or head_x >+ WIDTH or head_y < 0 or head_y >+ HEIGHT or (head_x, head_y) in snake:
            screen.fill(BLACK) #Clear screen
            draw_text("SNEK DED", font, RED, WIDTH // 2-100, HEIGHT // 6)
            draw_text(f"Score: {score}", font, WHITE, WIDTH // 1.75-100, HEIGHT // 3)
            draw_text("Press 'R' to Restart or 'Q' to Quit", font, GREEN, WIDTH // 2.75-100, HEIGHT // 2)
            draw_text("Or 'M' for main menu", font, GREEN, WIDTH // 2.75-100, HEIGHT // 1.75)
            draw_text(f"High Scores: {highscores}", font, WHITE, WIDTH // 1.75-100, HEIGHT // 1.5)                  #High Scores
            pygame.display.update() #Update screen to show messages

            #Player Input
            waiting = True
            while waiting:
                for event in pygame.event.get():
                    print(event) #Prints all events
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_r: #restart game
                            waiting = False
                        elif event.key == pygame.K_m: #main menu
                            waiting = False
                            menu_running = True
                            game_speed = main_menu()
                            running = False
                        elif event.key == pygame.K_q: #quit game
                            pygame.quit()
                            exit()

            pygame.display.update() #Update screen to show messages
            break
        
        #Extend SNEKE
        new_head = (head_x, head_y)
        snake.insert(0, new_head) 

        #SNEKE eat food?
        if new_head == food:
            food = (random.randint(0, WIDTH // CELL_SIZE - 1) * CELL_SIZE,
                    random.randint(0, HEIGHT // CELL_SIZE - 1) * CELL_SIZE)
            score += 1 #Score for eating food
            print(f"Score: {score}")
        else:
            snake.pop() #keep SNEK size constant if no food

        #Scoring
        font = pygame.font.Font(None, 36) #Font size 36, default font
        score_text = font.render(f"Score: {score}", True, WHITE)
        screen.blit(score_text, (10, 10)) #Display Score location
        
        #Draw SNEKE
        for segment in snake:
            pygame.draw.rect(screen, GREEN, (segment[0], segment[1], CELL_SIZE, CELL_SIZE))
        
        #Draw Food
        pygame.draw.rect(screen, RED, (food[0], food[1], CELL_SIZE, CELL_SIZE))

        #Refresh Screen
        pygame.display.update()
        clock.tick(game_speed) #game speed

pygame.quit()
print(f"FINAL SCORE: {score}")