#Imports
import pygame
import random
import time

score = 0

#Draw
def draw_text(text, font, color, x, y):
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))

#Initialize pygame
print("Initializing Sneke...")
pygame.display.init()
print("Creating Sneke window...")
pygame.font.init()

#Screen Dimensions
WIDTH, HEIGHT = 600,400
CELL_SIZE = 20 #size of each grid

#COLORS!
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLACK = (0, 0, 0)

#CREATE GAME WINDOW
screen = pygame.display.set_mode((WIDTH, HEIGHT))
print("Game window created successfully!")
pygame.display.set_caption("SNEKE")
pygame.event.set_grab(True) #captures all keyboard inputs

#SNEKE settings
snake = [(100, 100), (90, 100), (80, 100)] #list of segments
direction = "RIGHT"

#Gobble Settings
food = (random.randint(0, WIDTH // CELL_SIZE - 1) * CELL_SIZE,
        random.randint(0, HEIGHT // CELL_SIZE - 1) * CELL_SIZE)

#Game Loop
print("Starting Sneke loop...")
running = True
clock = pygame.time.Clock()
counter = 0 #Debug counter

while True: #Constant running
    running = True
    snake = [(100, 100), (90, 100), (80, 100)]
    direction = "RIGHT"
    score = 0
    while running:
        screen.fill(BLACK) #background


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                print("Quit event detected")
                pygame.quit()
                exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and direction != "DOWN":
                    direction = "UP"
                elif event.key == pygame.K_DOWN and direction != "UP":
                    direction = "DOWN"
                elif event.key == pygame.K_LEFT and direction != "RIGHT":
                    direction = "LEFT"
                elif event.key == pygame.K_RIGHT and direction != "LEFT":
                    direction = "RIGHT"
            
        #MOVE SNEKE
        head_x, head_y = snake[0]
        if direction == "UP":
            head_y -= CELL_SIZE
        elif direction == "DOWN":
            head_y += CELL_SIZE
        elif direction == "LEFT":
            head_x -= CELL_SIZE
        elif direction == "RIGHT":
            head_x += CELL_SIZE

        #Collision Detection (GAME OVER)
        if head_x < 0 or head_x >+ WIDTH or head_y < 0 or head_y >+ HEIGHT or (head_x, head_y) in snake:
            screen.fill(BLACK) #Clear screen
            draw_text("SNEK DED", font, RED, WIDTH // 2-100, HEIGHT // 3)
            draw_text(f"Score: {score}", font, WHITE, WIDTH // 2-100, HEIGHT // 2)
            draw_text("Press 'R' to Restart or 'Q' to Quit", font, GREEN, WIDTH // 2-100, HEIGHT // 1.5)

            #Player Input
            waiting = True
            if not pygame.key.get_focused():
                print ("Click the game window to enable keyboard input.")

            while waiting:
                for event in pygame.event.get():
                    print(event) #Prints all events
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_r: #restart game
                            waiting= False
                        elif event.key == pygame.K_q: #quit game
                            pygame.quit()
                            exit()

            pygame.display.update() #Update screen to show messages
        
        #Extend SNEKE
        new_head = (head_x, head_y)
        snake.insert(0, new_head) 

        #SNEKE eat food?
        if new_head == food:
            food = (random.randint(0, WIDTH // CELL_SIZE - 1) * CELL_SIZE,
                    random.randint(0, HEIGHT // CELL_SIZE - 1) * CELL_SIZE)
            score += 1 #Score for eating food
            print(f"Score: {score}")
        else:
            snake.pop() #keep SNEKE size constant if no food

        #Scoring
        font = pygame.font.Font(None, 36) #Font size 36, default font
        score_text = font.render(f"Score: {score}", True, WHITE)
        screen.blit(score_text, (10, 10)) #Display Score location

        #Draw SNEKE
        for segment in snake:
            pygame.draw.rect(screen, GREEN, (segment[0], segment[1], CELL_SIZE, CELL_SIZE))
        
        #Draw Food
        pygame.draw.rect(screen, RED, (food[0], food[1], CELL_SIZE, CELL_SIZE))

        #Refresh Screen
        pygame.display.update()
        clock.tick(10) #game speed

pygame.quit()
print(f"FINAL SCORE: {score}")
